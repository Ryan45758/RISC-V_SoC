#!/bin/bash
source ./$(dirname ${0})/util.sh;

slvnum=${1};
mstnum=${2};

fname="axi_${1}to${2}_mon.sv";
module="axi_${1}to${2}_mon";
sbfile="${3}";
mapfile="${4}";

declare -A aw_chn_sideband;
declare -A  w_chn_sideband;
declare -A  b_chn_sideband;
declare -A ar_chn_sideband;
declare -A  r_chn_sideband;

# get sideband
echo "Get sideband"
while read -r line
do
    case $line in
        aw* ) 
            echo "[AW] ${line}";
            read -r name width <<< ${line};
            aw_chn_sideband["${name}"]=${width};
            ;;
        w*  ) 
            echo "[W]  ${line}"
            read -r name width <<< ${line};
            w_chn_sideband["${name}"]=${width};
            ;;
        b*  )
            echo "[B]  ${line}"
            read -r name width <<< ${line};
            b_chn_sideband["${name}"]=${width};
            ;;
        ar* )
            echo "[AR] ${line}"
            read -r name width <<< ${line};
            ar_chn_sideband["${name}"]=${width};
            ;;
        r*  )
            echo "[R]  ${line}"
            read -r name width <<< ${line};
            r_chn_sideband["${name}"]=${width};
            ;;
        \#* ) ;; # ignore
        ""  ) ;; # ignore
        *   ) echo "[ERROR] unknown sideband ${line}";;
    esac
done < ${sbfile}

# remove handshake signal
unset aw_chn_sideband["awvalid"];
unset aw_chn_sideband["awready"];

unset w_chn_sideband["wlast"];
unset w_chn_sideband["wvalid"];
unset w_chn_sideband["wready"];

unset b_chn_sideband["bvalid"];
unset b_chn_sideband["bready"];

unset ar_chn_sideband["arvalid"];
unset ar_chn_sideband["arready"];

unset r_chn_sideband["rlast"];
unset r_chn_sideband["rvalid"];
unset r_chn_sideband["rready"];

if [ "${aw_chn_sideband["awid"]+1}" != "1" ]; then
    aw_chn_sideband["awid"]=10;
fi
w_chn_sideband["wid"]=${aw_chn_sideband["awid"]};
b_chn_sideband["bid"]=${aw_chn_sideband["awid"]};
ar_chn_sideband["arid"]=${aw_chn_sideband["awid"]};
r_chn_sideband["rid"]=${aw_chn_sideband["awid"]};

declare -p aw_chn_sideband
declare -p w_chn_sideband
declare -p b_chn_sideband
declare -p ar_chn_sideband
declare -p r_chn_sideband

# get slave mapping
tmp=0;
slvbase=();
slvsize=();
echo "Get memory map"
while read -r line
do
    case $line in
        [0-9]* ) 
            read -r base size <<< ${line};
            slvbase+=(${base});
            slvsize+=(${size});
            echo "slv${tmp} base: 0x${slvbase[${tmp}]}, size: 0x${slvsize[${tmp}]}";
            tmp=`expr ${tmp} + 1`;
            ;;
        \#* ) ;; # ignore
        ""  ) ;; # ignore
        *   ) echo "[ERROR] unknown sideband ${line}";;
    esac
done < ${mapfile}

rm -f ${fname};
touch ${fname};

echo   "/*-----------------------------------------------------*/" >> ${fname};
printf "// %s is generated by %s\n" ${fname} ${0}                  >> ${fname};
echo   "//"                                                        >> ${fname};
printf "// %50s\n" $(date +"%Y-%m-%d %H:%M:%S")                    >> ${fname};
echo   "/*-----------------------------------------------------*/" >> ${fname};
echo   ""                                                          >> ${fname};
printf "module %s (\n" "${module}" >> ${fname};
print_io i 1 aclk 1                >> ${fname};
print_io i 1 aresetn               >> ${fname};
for (( i = 0; i < ${slvnum}; i++ )); do
    for item in "${!aw_chn_sideband[@]}"; do
        print_io i ${aw_chn_sideband[${item}]} m${i}_${item} >> ${fname};
    done
    print_io i 1 m${i}_awvalid          >> ${fname};
    print_io i 1 m${i}_awready          >> ${fname};
    for item in "${!w_chn_sideband[@]}"; do
        print_io i ${w_chn_sideband[${item}]} m${i}_${item} >> ${fname};
    done
    print_io i 1 m${i}_wlast            >> ${fname};
    print_io i 1 m${i}_wvalid           >> ${fname};
    print_io i 1 m${i}_wready           >> ${fname};
    for item in "${!b_chn_sideband[@]}"; do
        print_io i ${b_chn_sideband[${item}]} m${i}_${item} >> ${fname};
    done
    print_io i 1 m${i}_bvalid           >> ${fname};
    print_io i 1 m${i}_bready           >> ${fname};
    for item in "${!ar_chn_sideband[@]}"; do
        print_io i ${ar_chn_sideband[${item}]} m${i}_${item} >> ${fname};
    done
    print_io i 1 m${i}_arvalid          >> ${fname};
    print_io i 1 m${i}_arready          >> ${fname};
    for item in "${!r_chn_sideband[@]}"; do
        print_io i ${r_chn_sideband[${item}]} m${i}_${item} >> ${fname};
    done
    print_io i 1 m${i}_rlast            >> ${fname};
    print_io i 1 m${i}_rvalid           >> ${fname};
    print_io i 1 m${i}_rready           >> ${fname};
done
for (( i = 0; i < ${mstnum}; i++ )); do
    for item in "${!aw_chn_sideband[@]}"; do
        if [ "${item}" == "awid" ]; then
            print_io i `expr ${aw_chn_sideband[${item}]} + $(log2_ceil ${slvnum})` s${i}_${item} >> ${fname};
        else
            print_io i ${aw_chn_sideband[${item}]} s${i}_${item} >> ${fname};
        fi
    done
    print_io i 1 s${i}_awvalid          >> ${fname};
    print_io i 1 s${i}_awready          >> ${fname};
    for item in "${!w_chn_sideband[@]}"; do
        if [ "${item}" == "wid" ]; then
            print_io i `expr ${w_chn_sideband[${item}]} + $(log2_ceil ${slvnum})` s${i}_${item} >> ${fname};
        else
            print_io i ${w_chn_sideband[${item}]} s${i}_${item} >> ${fname};
        fi
    done
    print_io i 1 s${i}_wlast            >> ${fname};
    print_io i 1 s${i}_wvalid           >> ${fname};
    print_io i 1 s${i}_wready           >> ${fname};
    for item in "${!b_chn_sideband[@]}"; do
        if [ "${item}" == "bid" ]; then
            print_io i `expr ${b_chn_sideband[${item}]} + $(log2_ceil ${slvnum})` s${i}_${item} >> ${fname};
        else
            print_io i ${b_chn_sideband[${item}]} s${i}_${item} >> ${fname};
        fi
    done
    print_io i 1 s${i}_bvalid           >> ${fname};
    print_io i 1 s${i}_bready           >> ${fname};
    for item in "${!ar_chn_sideband[@]}"; do
        if [ "${item}" == "arid" ]; then
            print_io i `expr ${ar_chn_sideband[${item}]} + $(log2_ceil ${slvnum})` s${i}_${item} >> ${fname};
        else
            print_io i ${ar_chn_sideband[${item}]} s${i}_${item} >> ${fname};
        fi
    done
    print_io i 1 s${i}_arvalid          >> ${fname};
    print_io i 1 s${i}_arready          >> ${fname};
    for item in "${!r_chn_sideband[@]}"; do
        if [ "${item}" == "rid" ]; then
            print_io i `expr ${r_chn_sideband[${item}]} + $(log2_ceil ${slvnum})` s${i}_${item} >> ${fname};
        else
            print_io i ${r_chn_sideband[${item}]} s${i}_${item} >> ${fname};
        fi
    done
    print_io i 1 s${i}_rlast            >> ${fname};
    print_io i 1 s${i}_rvalid           >> ${fname};
    print_io i 1 s${i}_rready           >> ${fname};
done
printf "\n);\n\n" >> ${fname};

printf "string errmsg;\n" >> ${fname};
printf "bit    errflag;\n" >> ${fname};
echo "" >> ${fname};

tmp=($(log2_ceil ${slvnum}));
for item in "${!aw_chn_sideband[@]}"; do
    tmp+=(${aw_chn_sideband[${item}]});
done
tmp=$(IFS="+" ; echo "${tmp[*]}";);
printf "parameter AW_PAYLD_WIDTH = ${tmp//+/ + };\n" >> ${fname};
tmp=($(log2_ceil ${slvnum}));
for item in "${!w_chn_sideband[@]}"; do
    tmp+=(${w_chn_sideband[${item}]});
done
tmp+=(1);
tmp=$(IFS="+" ; echo "${tmp[*]}";);
printf "parameter W_PAYLD_WIDTH  = ${tmp//+/ + };\n" >> ${fname};
tmp=();
for item in "${!b_chn_sideband[@]}"; do
    tmp+=(${b_chn_sideband[${item}]});
done
tmp=$(IFS="+" ; echo "${tmp[*]}";);
printf "parameter B_PAYLD_WIDTH  = ${tmp//+/ + };\n" >> ${fname};
tmp=($(log2_ceil ${slvnum}));
for item in "${!ar_chn_sideband[@]}"; do
    tmp+=(${ar_chn_sideband[${item}]});
done
tmp=$(IFS="+" ; echo "${tmp[*]}";);
printf "parameter AR_PAYLD_WIDTH = ${tmp//+/ + };\n" >> ${fname};
tmp=();
for item in "${!r_chn_sideband[@]}"; do
    tmp+=(${r_chn_sideband[${item}]});
done
tmp+=(1);
tmp=$(IFS="+" ; echo "${tmp[*]}";);
printf "parameter R_PAYLD_WIDTH  = ${tmp//+/ + };\n" >> ${fname};
echo "" >> ${fname};
print_logic aw_payld_in  AW_PAYLD_WIDTH >> ${fname};
print_logic w_payld_in   W_PAYLD_WIDTH  >> ${fname};
print_logic b_payld_in   B_PAYLD_WIDTH  >> ${fname};
print_logic ar_payld_in  AR_PAYLD_WIDTH >> ${fname};
print_logic r_payld_in   R_PAYLD_WIDTH  >> ${fname};
print_logic aw_payld_out AW_PAYLD_WIDTH >> ${fname};
print_logic w_payld_out  W_PAYLD_WIDTH  >> ${fname};
print_logic b_payld_out  B_PAYLD_WIDTH  >> ${fname};
print_logic ar_payld_out AR_PAYLD_WIDTH >> ${fname};
print_logic r_payld_out  R_PAYLD_WIDTH  >> ${fname};
print_logic aw_payld_cmp AW_PAYLD_WIDTH >> ${fname};
print_logic w_payld_cmp  W_PAYLD_WIDTH  >> ${fname};
print_logic b_payld_cmp  B_PAYLD_WIDTH  >> ${fname};
print_logic ar_payld_cmp AR_PAYLD_WIDTH >> ${fname};
print_logic r_payld_cmp  R_PAYLD_WIDTH  >> ${fname};
print_logic aw_mon_fifo_wr 1 >> ${fname};
print_logic aw_mon_fifo_rd 1 >> ${fname};
print_logic aw_mon_fifo_empty 1 >> ${fname};
print_logic aw_mon_fifo_full 1 >> ${fname};
print_logic w_mon_fifo_wr 1 >> ${fname};
print_logic w_mon_fifo_rd 1 >> ${fname};
print_logic w_mon_fifo_empty 1 >> ${fname};
print_logic w_mon_fifo_full 1 >> ${fname};
print_logic b_mon_fifo_wr 1 >> ${fname};
print_logic b_mon_fifo_rd 1 >> ${fname};
print_logic b_mon_fifo_empty 1 >> ${fname};
print_logic b_mon_fifo_full 1 >> ${fname};
print_logic ar_mon_fifo_wr 1 >> ${fname};
print_logic ar_mon_fifo_rd 1 >> ${fname};
print_logic ar_mon_fifo_empty 1 >> ${fname};
print_logic ar_mon_fifo_full 1 >> ${fname};
print_logic r_mon_fifo_wr 1 >> ${fname};
print_logic r_mon_fifo_rd 1 >> ${fname};
print_logic r_mon_fifo_empty 1 >> ${fname};
print_logic r_mon_fifo_full 1 >> ${fname};
print_logic aw_payld_cmp_en 1 >> ${fname};
print_logic w_payld_cmp_en 1 >> ${fname};
print_logic b_payld_cmp_en 1 >> ${fname};
print_logic ar_payld_cmp_en 1 >> ${fname};
print_logic r_payld_cmp_en 1 >> ${fname};
print_logic aw_cmp_fail 1 >> ${fname};
print_logic w_cmp_fail 1 >> ${fname};
print_logic b_cmp_fail 1 >> ${fname};
print_logic ar_cmp_fail 1 >> ${fname};
print_logic r_cmp_fail 1 >> ${fname};

print_logic m_aw_sel ${slvnum} >> ${fname};
print_logic m_w_sel  ${slvnum} >> ${fname};
print_logic m_b_sel  ${slvnum} >> ${fname};
print_logic m_ar_sel ${slvnum} >> ${fname};
print_logic m_r_sel  ${slvnum} >> ${fname};
print_logic s_aw_sel ${mstnum} >> ${fname};
print_logic s_w_sel  ${mstnum} >> ${fname};
print_logic s_b_sel  ${mstnum} >> ${fname};
print_logic s_ar_sel ${mstnum} >> ${fname};
print_logic s_r_sel  ${mstnum} >> ${fname};
print_logic s_wlast  ${mstnum} >> ${fname};
echo "" >> ${fname};

print_logic m_aw_sel_sum $(log2_ceil `expr ${slvnum} + 1`) >> ${fname};
print_logic m_w_sel_sum  $(log2_ceil `expr ${slvnum} + 1`) >> ${fname};
print_logic m_b_sel_sum  $(log2_ceil `expr ${slvnum} + 1`) >> ${fname};
print_logic m_ar_sel_sum $(log2_ceil `expr ${slvnum} + 1`) >> ${fname};
print_logic m_r_sel_sum  $(log2_ceil `expr ${slvnum} + 1`) >> ${fname};
print_logic s_aw_sel_sum $(log2_ceil `expr ${mstnum} + 1`) >> ${fname};
print_logic s_w_sel_sum  $(log2_ceil `expr ${mstnum} + 1`) >> ${fname};
print_logic s_b_sel_sum  $(log2_ceil `expr ${mstnum} + 1`) >> ${fname};
print_logic s_ar_sel_sum $(log2_ceil `expr ${mstnum} + 1`) >> ${fname};
print_logic s_r_sel_sum  $(log2_ceil `expr ${mstnum} + 1`) >> ${fname};
echo "" >> ${fname};

if [ ${slvnum} -gt 1 ]; then
    for (( i = 0; i < ${slvnum}; i++ )); do
        printf "assign %-10s[%3d] = %-10s & %s;\n" m_aw_sel ${i} m${i}_awvalid m${i}_awready >> ${fname};
        printf "assign %-10s[%3d] = %-10s & %s;\n" m_w_sel  ${i} m${i}_wvalid  m${i}_wready  >> ${fname};
        printf "assign %-10s[%3d] = %-10s & %s;\n" m_b_sel  ${i} m${i}_bvalid  m${i}_bready  >> ${fname};
        printf "assign %-10s[%3d] = %-10s & %s;\n" m_ar_sel ${i} m${i}_arvalid m${i}_arready >> ${fname};
        printf "assign %-10s[%3d] = %-10s & %s;\n" m_r_sel  ${i} m${i}_rvalid  m${i}_rready  >> ${fname};
    done
else
    printf "assign %-10s = %-10s & %s;\n" m_aw_sel m0_awvalid m0_awready >> ${fname};
    printf "assign %-10s = %-10s & %s;\n" m_w_sel  m0_wvalid  m0_wready  >> ${fname};
    printf "assign %-10s = %-10s & %s;\n" m_b_sel  m0_bvalid  m0_bready  >> ${fname};
    printf "assign %-10s = %-10s & %s;\n" m_ar_sel m0_arvalid m0_arready >> ${fname};
    printf "assign %-10s = %-10s & %s;\n" m_r_sel  m0_rvalid  m0_rready  >> ${fname};
fi
if [ ${mstnum} -gt 1 ]; then
    for (( i = 0; i < ${mstnum}; i++ )); do
        printf "assign %-10s[%3d] = %-10s & %s;\n" s_aw_sel ${i} s${i}_awvalid s${i}_awready >> ${fname};
        printf "assign %-10s[%3d] = %-10s & %s;\n" s_w_sel  ${i} s${i}_wvalid  s${i}_wready  >> ${fname};
        printf "assign %-10s[%3d] = %-10s & %s;\n" s_b_sel  ${i} s${i}_bvalid  s${i}_bready  >> ${fname};
        printf "assign %-10s[%3d] = %-10s & %s;\n" s_ar_sel ${i} s${i}_arvalid s${i}_arready >> ${fname};
        printf "assign %-10s[%3d] = %-10s & %s;\n" s_r_sel  ${i} s${i}_rvalid  s${i}_rready  >> ${fname};
        printf "assign %-10s[%3d] = %s;\n"         s_wlast  ${i} s${i}_wlast                 >> ${fname};
    done
else
    printf "assign %-10s = %-10s & %s;\n" s_aw_sel s0_awvalid s0_awready >> ${fname};
    printf "assign %-10s = %-10s & %s;\n" s_w_sel  s0_wvalid  s0_wready  >> ${fname};
    printf "assign %-10s = %-10s & %s;\n" s_b_sel  s0_bvalid  s0_bready  >> ${fname};
    printf "assign %-10s = %-10s & %s;\n" s_ar_sel s0_arvalid s0_arready >> ${fname};
    printf "assign %-10s = %-10s & %s;\n" s_r_sel  s0_rvalid  s0_rready  >> ${fname};
fi
echo "" >> ${fname};

printf "always @(*) begin\n" >> ${fname};
printf "    integer i;\n" >> ${fname};
printf "\n" >> ${fname};
if [ ${slvnum} -gt 1 ]; then
    printf "    m_aw_sel_sum = %d'b0;\n" $(log2_ceil `expr ${slvnum} + 1`) >> ${fname};
    printf "    m_w_sel_sum  = %d'b0;\n" $(log2_ceil `expr ${slvnum} + 1`) >> ${fname};
    printf "    m_b_sel_sum  = %d'b0;\n" $(log2_ceil `expr ${slvnum} + 1`) >> ${fname};
    printf "    m_ar_sel_sum = %d'b0;\n" $(log2_ceil `expr ${slvnum} + 1`) >> ${fname};
    printf "    m_r_sel_sum  = %d'b0;\n" $(log2_ceil `expr ${slvnum} + 1`) >> ${fname};
    printf "    for (i = 0; i < %d; i = i + 1) begin\n" ${slvnum} >> ${fname};
    printf "        m_aw_sel_sum = m_aw_sel_sum + (m_aw_sel[i] ? %d'b1 : %d'b0);\n" $(log2_ceil `expr ${slvnum} + 1`) $(log2_ceil `expr ${mstnum} + 1`) >> ${fname};
    printf "        m_w_sel_sum  = m_w_sel_sum  + (m_w_sel [i] ? %d'b1 : %d'b0);\n" $(log2_ceil `expr ${slvnum} + 1`) $(log2_ceil `expr ${mstnum} + 1`) >> ${fname};
    printf "        m_b_sel_sum  = m_b_sel_sum  + (m_b_sel [i] ? %d'b1 : %d'b0);\n" $(log2_ceil `expr ${slvnum} + 1`) $(log2_ceil `expr ${mstnum} + 1`) >> ${fname};
    printf "        m_ar_sel_sum = m_ar_sel_sum + (m_ar_sel[i] ? %d'b1 : %d'b0);\n" $(log2_ceil `expr ${slvnum} + 1`) $(log2_ceil `expr ${mstnum} + 1`) >> ${fname};
    printf "        m_r_sel_sum  = m_r_sel_sum  + (m_r_sel [i] ? %d'b1 : %d'b0);\n" $(log2_ceil `expr ${slvnum} + 1`) $(log2_ceil `expr ${mstnum} + 1`) >> ${fname};
    printf "    end\n" >> ${fname};
else
    printf "    m_aw_sel_sum = m_aw_sel;\n" $(log2_ceil `expr ${slvnum} + 1`) >> ${fname};
    printf "    m_w_sel_sum  = m_w_sel;\n" $(log2_ceil `expr ${slvnum} + 1`) >> ${fname};
    printf "    m_b_sel_sum  = m_b_sel;\n" $(log2_ceil `expr ${slvnum} + 1`) >> ${fname};
    printf "    m_ar_sel_sum = m_ar_sel;\n" $(log2_ceil `expr ${slvnum} + 1`) >> ${fname};
    printf "    m_r_sel_sum  = m_r_sel;\n" $(log2_ceil `expr ${slvnum} + 1`) >> ${fname};
fi
printf "\n" >> ${fname};
if [ ${mstnum} -gt 1 ]; then
    printf "    s_aw_sel_sum = %d'b0;\n" $(log2_ceil `expr ${mstnum} + 1`) >> ${fname};
    printf "    s_w_sel_sum  = %d'b0;\n" $(log2_ceil `expr ${mstnum} + 1`) >> ${fname};
    printf "    s_b_sel_sum  = %d'b0;\n" $(log2_ceil `expr ${mstnum} + 1`) >> ${fname};
    printf "    s_ar_sel_sum = %d'b0;\n" $(log2_ceil `expr ${mstnum} + 1`) >> ${fname};
    printf "    s_r_sel_sum  = %d'b0;\n" $(log2_ceil `expr ${mstnum} + 1`) >> ${fname};
    printf "    for (i = 0; i < %d; i = i + 1) begin\n" ${mstnum} >> ${fname};
    printf "        s_aw_sel_sum = s_aw_sel_sum + (s_aw_sel[i] ? %d'b1 : %d'b0);\n" $(log2_ceil `expr ${mstnum} + 1`) $(log2_ceil `expr ${mstnum} + 1`) >> ${fname};
    printf "        s_w_sel_sum  = s_w_sel_sum  + (s_w_sel [i] ? %d'b1 : %d'b0);\n" $(log2_ceil `expr ${mstnum} + 1`) $(log2_ceil `expr ${mstnum} + 1`) >> ${fname};
    printf "        s_b_sel_sum  = s_b_sel_sum  + (s_b_sel [i] ? %d'b1 : %d'b0);\n" $(log2_ceil `expr ${mstnum} + 1`) $(log2_ceil `expr ${mstnum} + 1`) >> ${fname};
    printf "        s_ar_sel_sum = s_ar_sel_sum + (s_ar_sel[i] ? %d'b1 : %d'b0);\n" $(log2_ceil `expr ${mstnum} + 1`) $(log2_ceil `expr ${mstnum} + 1`) >> ${fname};
    printf "        s_r_sel_sum  = s_r_sel_sum  + (s_r_sel [i] ? %d'b1 : %d'b0);\n" $(log2_ceil `expr ${mstnum} + 1`) $(log2_ceil `expr ${mstnum} + 1`) >> ${fname};
    printf "    end\n" >> ${fname};
else
    printf "    s_aw_sel_sum = s_aw_sel;\n" $(log2_ceil `expr ${slvnum} + 1`) >> ${fname};
    printf "    s_w_sel_sum  = s_w_sel;\n" $(log2_ceil `expr ${slvnum} + 1`) >> ${fname};
    printf "    s_b_sel_sum  = s_b_sel;\n" $(log2_ceil `expr ${slvnum} + 1`) >> ${fname};
    printf "    s_ar_sel_sum = s_ar_sel;\n" $(log2_ceil `expr ${slvnum} + 1`) >> ${fname};
    printf "    s_r_sel_sum  = s_r_sel;\n" $(log2_ceil `expr ${slvnum} + 1`) >> ${fname};
fi
printf "end\n" >> ${fname};
echo "" >> ${fname};

printf "always @(posedge aclk) begin\n" >> ${fname};
printf "    if (~aresetn) begin\n" >> ${fname};
printf "        errflag = 0;\n" >> ${fname};
printf "    end\n" >> ${fname};
printf "    else begin\n" >> ${fname};
printf "        if (aw_mon_fifo_full)              begin errmsg = \"aw payld fifo full\";              errflag = 1; end\n" >> ${fname};
printf "        if (w_mon_fifo_full)               begin errmsg = \"w  payld fifo full\";              errflag = 1; end\n" >> ${fname};
printf "        if (b_mon_fifo_full)               begin errmsg = \"b  payld fifo full\";              errflag = 1; end\n" >> ${fname};
printf "        if (ar_mon_fifo_full)              begin errmsg = \"ar payld fifo full\";              errflag = 1; end\n" >> ${fname};
printf "        if (r_mon_fifo_full)               begin errmsg = \"r  payld fifo full\";              errflag = 1; end\n" >> ${fname};
printf "        if (m_aw_sel_sum > 1)              begin errmsg = \"master aw transfer at same time\"; errflag = 1; end\n" >> ${fname};
printf "        if (m_w_sel_sum  > 1)              begin errmsg = \"master w  transfer at same time\"; errflag = 1; end\n" >> ${fname};
printf "        if (m_b_sel_sum  > 1)              begin errmsg = \"master b  transfer at same time\"; errflag = 1; end\n" >> ${fname};
printf "        if (m_ar_sel_sum > 1)              begin errmsg = \"master ar transfer at same time\"; errflag = 1; end\n" >> ${fname};
printf "        if (m_r_sel_sum  > 1)              begin errmsg = \"master ar transfer at same time\"; errflag = 1; end\n" >> ${fname};
printf "        if (s_aw_sel_sum > 1)              begin errmsg = \"slave aw transfer at same time\";  errflag = 1; end\n" >> ${fname};
printf "        if (s_w_sel_sum  > 1)              begin errmsg = \"slave w  transfer at same time\";  errflag = 1; end\n" >> ${fname};
printf "        if (s_b_sel_sum  > 1)              begin errmsg = \"slave b  transfer at same time\";  errflag = 1; end\n" >> ${fname};
printf "        if (s_ar_sel_sum > 1)              begin errmsg = \"slave ar transfer at same time\";  errflag = 1; end\n" >> ${fname};
printf "        if (s_r_sel_sum  > 1)              begin errmsg = \"slave ar transfer at same time\";  errflag = 1; end\n" >> ${fname};
printf "        if (|s_aw_sel & ~aw_payld_cmp_en)  begin errmsg = \"aw got transaction unexpacted\";   errflag = 1; end\n" >> ${fname};
printf "        if (|s_w_sel  & ~w_payld_cmp_en )  begin errmsg = \"w  got transaction unexpacted\";   errflag = 1; end\n" >> ${fname};
printf "        if (|m_b_sel  & ~b_payld_cmp_en )  begin errmsg = \"b  got transaction unexpacted\";   errflag = 1; end\n" >> ${fname};
printf "        if (|s_ar_sel & ~ar_payld_cmp_en)  begin errmsg = \"ar got transaction unexpacted\";   errflag = 1; end\n" >> ${fname};
printf "        if (|m_r_sel  & ~r_payld_cmp_en )  begin errmsg = \"r  got transaction unexpacted\";   errflag = 1; end\n" >> ${fname};
printf "        if (aw_payld_cmp_en & aw_cmp_fail) begin errmsg = \"aw got transaction mismatch\";     errflag = 1; end\n" >> ${fname};
printf "        if (w_payld_cmp_en  & w_cmp_fail ) begin errmsg = \"w  got transaction mismatch\";     errflag = 1; end\n" >> ${fname};
printf "        if (b_payld_cmp_en  & b_cmp_fail ) begin errmsg = \"b  got transaction mismatch\";     errflag = 1; end\n" >> ${fname};
printf "        if (ar_payld_cmp_en & ar_cmp_fail) begin errmsg = \"ar got transaction mismatch\";     errflag = 1; end\n" >> ${fname};
printf "        if (r_payld_cmp_en  & r_cmp_fail ) begin errmsg = \"r  got transaction mismatch\";     errflag = 1; end\n" >> ${fname};
printf "    end\n" >> ${fname};
printf "end\n" >> ${fname};
echo "" >> ${fname};
printf "always @(posedge errflag) begin\n" >> ${fname};
printf "    \$display(\"[ERROR] [%%0d ns] %%s\", \$time, errmsg);\n" >> ${fname};
printf "    \$finish;\n" >> ${fname};
printf "end\n" >> ${fname};
echo "" >> ${fname};

printf "always @(posedge aclk) begin\n" >> ${fname};
printf "    if (aresetn) begin\n" >> ${fname};
printf "        if (aw_payld_cmp_en & ~aw_cmp_fail) begin\n" >> ${fname};
printf "            \$display(\"[INFO] [%%0d ns] mst & slv aw transaction match. awid: 0x%%0x, awaddr: 0x%%0x, awburst: 0x%%0x, awsize: 0x%%0x, awlen: 0x%%0x\",\n" >> ${fname};
printf "                     \$time, s0_awid, s0_awaddr, s0_awburst, s0_awsize, s0_awlen);\n" >> ${fname};
printf "        end\n" >> ${fname};
printf "        if (w_payld_cmp_en  & ~w_cmp_fail) begin\n" >> ${fname};
printf "            \$display(\"[INFO] [%%0d ns] mst & slv w  transaction match. wid: 0x%%0x, wstrb: 0x%%0x, wdata: 0x%%0x, wlast: 0x%%0x\",\n" >> ${fname};
printf "                     \$time, s0_wid, s0_wstrb, s0_wdata, s0_wlast);\n" >> ${fname};
printf "        end\n" >> ${fname};
printf "        if (b_payld_cmp_en  & ~b_cmp_fail) begin\n" >> ${fname};
printf "            \$display(\"[INFO] [%%0d ns] mst & slv b  transaction match. bid: 0x%%0x, bresp: 0x%%0x\",\n" >> ${fname};
printf "                     \$time, b_payld_cmp[2+:10], b_payld_cmp[0+:2]);\n" >> ${fname};
printf "        end\n" >> ${fname};
printf "        if (ar_payld_cmp_en & ~ar_cmp_fail) begin\n" >> ${fname};
printf "            \$display(\"[INFO] [%%0d ns] mst & slv ar transaction match. arid: 0x%%0x, araddr: 0x%%0x, arburst: 0x%%0x, arsize: 0x%%0x, arlen: 0x%%0x\",\n" >> ${fname};
printf "                     \$time, s0_arid, s0_araddr, s0_arburst, s0_arsize, s0_arlen);\n" >> ${fname};
printf "        end\n" >> ${fname};
printf "        if (r_payld_cmp_en  & ~r_cmp_fail) begin\n" >> ${fname};
printf "            \$display(\"[INFO] [%%0d ns] mst & slv r  transaction match. rid: 0x%%0x, rdata: 0x%%0x, rresp: 0x%%0x, rlast: 0x%%0x\",\n" >> ${fname};
printf "                     \$time, r_payld_cmp[35+:10], r_payld_cmp[3+:32], r_payld_cmp[1+:2], r_payld_cmp[0+:1]);\n" >> ${fname};
printf "        end\n" >> ${fname};
printf "    end\n" >> ${fname};
printf "end\n" >> ${fname};
echo "" >> ${fname};

# AW channel monitor
printf "\n// AW channel monitor\n" >> ${fname};
printf "assign aw_payld_cmp_en = |(s_aw_sel & (~aw_mon_fifo_empty ? aw_slvsel_out : ({%d{|m_aw_sel}} & aw_slvsel_in)));\n" \
       ${mstnum} >> ${fname};

printf "assign aw_payld_cmp = " >> ${fname};
for (( i = 0; i < ${mstnum}; i++ )); do
    tmp=();
    for item in "${!aw_chn_sideband[@]}"; do
        tmp+=(s${i}_${item});
    done
    tmp=$(IFS=,;echo "${tmp[*]}");
    printf "s_aw_sel[%3d] ? {${tmp//,/, }}:\n%22s" ${i} >> ${fname};
done
printf "%16s{AW_PAYLD_WIDTH{1'b0}};\n" "" >> ${fname};

printf "assign aw_payld_in = " >> ${fname};
for (( i = 0; i < ${slvnum}; i++ )); do
    tmp=();
    for item in "${!aw_chn_sideband[@]}"; do
        tmp+=(m${i}_${item});
        if [ "${item}" == "awid" ] && [ ${slvnum} -gt 1 ]; then
            tmp+=("$(log2_ceil ${slvnum})\'d${i}");
        fi
    done
    tmp=$(IFS=,;echo "${tmp[*]}");
    printf "m_aw_sel[%3d] ? {${tmp//,/, }}:\n%21s" ${i} >> ${fname};
done
printf "%16s{AW_PAYLD_WIDTH{1'b0}};\n" "" >> ${fname};
for (( i = 0; i < ${mstnum}; i++ )); do
    printf "assign aw_slvsel_in[%3d] = " ${i} >> ${fname};
    for (( j = 0; j < ${slvnum}; j++ )); do
        printf "m_aw_sel[%3d] ? (m${j}_awaddr >= %d'h%s && m${j}_awaddr < %d'h%s + %d'h%s):\n%27s" \
               ${j} ${aw_chn_sideband[awaddr]} ${slvbase[${i}]} \
               ${aw_chn_sideband[awaddr]} ${slvbase[${i}]} \
               ${aw_chn_sideband[awaddr]} ${slvsize[${i}]} >> ${fname};
    done
    printf "%16s1'b0;\n" "" >> ${fname};
done
printf "assign dfslv_awid_in = " >> ${fname};
for (( i = 0; i < ${slvnum}; i++ )); do
    if [ ${slvnum} -gt 1 ]; then
        printf "m_aw_sel[%3d] ? {m${i}_awid, $(log2_ceil ${slvnum})\'d${i}}:\n%23s" ${i} >> ${fname};
    else
        printf "m_aw_sel[%3d] ? m${i}_awid:\n%23s" ${i} >> ${fname};
    fi
done
printf "%16s`expr ${aw_chn_sideband[awid]} + $(log2_ceil ${slvnum})`'b0;\n" "" >> ${fname};
printf "assign aw_cmp_fail  = ~aw_mon_fifo_empty ? (aw_payld_cmp !== aw_payld_out):\n" >> ${fname};
printf "                                           (aw_payld_cmp !== aw_payld_in);\n" >> ${fname};
printf "\n" >> ${fname};
printf "assign aw_mon_fifo_wr = |m_aw_sel & ~(aw_mon_fifo_empty & (|s_aw_sel | ~|aw_slvsel_in));\n" >> ${fname};
printf "assign aw_mon_fifo_rd = |s_aw_sel | aw_dfslvsel_out;\n" >> ${fname};
echo "" >> ${fname};
printf "axi_mon_fifo #(\n" >> ${fname};
printf "    .DATA_WIDTH(AW_PAYLD_WIDTH),\n" >> ${fname};
printf "    .FIFO_DEPTH(128)\n" >> ${fname};
printf ") u_aw_mon_payld_fifo (\n" >> ${fname};
printf "    .clk   ( aclk              ),\n" >> ${fname};
printf "    .rstn  ( aresetn           ),\n" >> ${fname};
printf "    .wr    ( aw_mon_fifo_wr    ),\n" >> ${fname};
printf "    .wdata ( aw_payld_in       ),\n" >> ${fname};
printf "    .rd    ( aw_mon_fifo_rd    ),\n" >> ${fname};
printf "    .rdata ( aw_payld_out      ),\n" >> ${fname};
printf "    .empty ( aw_mon_fifo_empty ),\n" >> ${fname};
printf "    .full  ( aw_mon_fifo_full  )\n" >> ${fname};
printf ");\n" >> ${fname};
printf "\n" >> ${fname};
printf "axi_mon_fifo #(\n" >> ${fname};
printf "    .DATA_WIDTH(${mstnum} + 1),\n" >> ${fname};
printf "    .FIFO_DEPTH(128)\n" >> ${fname};
printf ") u_aw_mon_slvsel_fifo (\n" >> ${fname};
printf "    .clk   ( aclk              ),\n" >> ${fname};
printf "    .rstn  ( aresetn           ),\n" >> ${fname};
printf "    .wr    ( aw_mon_fifo_wr    ),\n" >> ${fname};
printf "    .wdata ( {~|aw_slvsel_in, aw_slvsel_in} ),\n" >> ${fname};
printf "    .rd    ( aw_mon_fifo_rd    ),\n" >> ${fname};
printf "    .rdata ( {aw_dfslvsel_out, aw_slvsel_out} )\n" >> ${fname};
printf ");\n" >> ${fname};
printf "\n" >> ${fname};
printf "axi_mon_fifo #(\n" >> ${fname};
printf "    .DATA_WIDTH(${aw_chn_sideband[awid]} + $(log2_ceil ${slvnum})),\n" >> ${fname};
printf "    .FIFO_DEPTH(128)\n" >> ${fname};
printf ") u_aw_mon_dfslv_awid_fifo (\n" >> ${fname};
printf "    .clk   ( aclk              ),\n" >> ${fname};
printf "    .rstn  ( aresetn           ),\n" >> ${fname};
printf "    .wr    ( |m_aw_sel & ~|aw_slvsel_in ),\n" >> ${fname};
printf "    .wdata ( dfslv_awid_in     ),\n" >> ${fname};
printf "    .rd    ( |m_b_sel & w_dfslvsel_out ),\n" >> ${fname};
printf "    .rdata ( dfslv_awid_out    )\n" >> ${fname};
printf ");\n" >> ${fname};

# W channel monitor
printf "\n// W channel monitor\n" >> ${fname};
printf "assign w_payld_cmp_en = |(s_w_sel & w_slvsel_out);\n" \
       ${mstnum} >> ${fname};

printf "assign w_payld_cmp  = " >> ${fname};
for (( i = 0; i < ${mstnum}; i++ )); do
    tmp=();
    for item in "${!w_chn_sideband[@]}"; do
        tmp+=(s${i}_${item});
    done
    tmp+=(s${i}_wlast);
    tmp=$(IFS=,;echo "${tmp[*]}");
    printf "s_w_sel[%3d] ? {${tmp//,/, }}:\n%22s" ${i} >> ${fname};
done
printf "%15s{W_PAYLD_WIDTH{1'b0}};\n" "" >> ${fname};

printf "assign w_payld_in  = " >> ${fname};
for (( i = 0; i < ${slvnum}; i++ )); do
    tmp=();
    for item in "${!w_chn_sideband[@]}"; do
        tmp+=(m${i}_${item});
        if [ "${item}" == "wid" ] && [ ${slvnum} -gt 1 ]; then
            tmp+=("$(log2_ceil ${slvnum})\'d${i}");
        fi
    done
    tmp+=(m${i}_wlast);
    tmp=$(IFS=,;echo "${tmp[*]}");
    printf "m_w_sel[%3d] ? {${tmp//,/, }}:\n%21s" ${i} >> ${fname};
done
printf "%15s{W_PAYLD_WIDTH{1'b0}};\n" "" >> ${fname};
printf "assign w_cmp_fail  = ~w_mon_fifo_empty ? (w_payld_cmp !== w_payld_out):\n" >> ${fname};
printf "                                         (w_payld_cmp !== w_payld_in);\n" >> ${fname};
printf "\n" >> ${fname};
printf "assign w_mon_fifo_wr = (|m_w_sel & ~(w_mon_fifo_empty & |s_w_sel)) | w_dfslvsel_out;\n" >> ${fname};
printf "assign w_mon_fifo_rd = |s_w_sel;\n" >> ${fname};
echo "" >> ${fname};
printf "axi_mon_fifo #(\n" >> ${fname};
printf "    .DATA_WIDTH(W_PAYLD_WIDTH),\n" >> ${fname};
printf "    .FIFO_DEPTH(128)\n" >> ${fname};
printf ") u_w_mon_payld_fifo (\n" >> ${fname};
printf "    .clk   ( aclk             ),\n" >> ${fname};
printf "    .rstn  ( aresetn          ),\n" >> ${fname};
printf "    .wr    ( w_mon_fifo_wr    ),\n" >> ${fname};
printf "    .wdata ( w_payld_in       ),\n" >> ${fname};
printf "    .rd    ( w_mon_fifo_rd    ),\n" >> ${fname};
printf "    .rdata ( w_payld_out      ),\n" >> ${fname};
printf "    .empty ( w_mon_fifo_empty ),\n" >> ${fname};
printf "    .full  ( w_mon_fifo_full  )\n" >> ${fname};
printf ");\n" >> ${fname};
printf "\n" >> ${fname};
printf "axi_mon_fifo #(\n" >> ${fname};
printf "    .DATA_WIDTH(${mstnum} + 1),\n" >> ${fname};
printf "    .FIFO_DEPTH(128)\n" >> ${fname};
printf ") u_w_mon_slvsel_fifo (\n" >> ${fname};
printf "    .clk   ( aclk              ),\n" >> ${fname};
printf "    .rstn  ( aresetn           ),\n" >> ${fname};
printf "    .wr    ( |m_aw_sel         ),\n" >> ${fname};
printf "    .wdata ( {~|aw_slvsel_in, aw_slvsel_in} ),\n" >> ${fname};
printf "    .rd    ( |m_b_sel          ),\n" >> ${fname};
printf "    .rdata ( {w_dfslvsel_out, w_slvsel_out} )\n" >> ${fname};
printf ");\n" >> ${fname};

# B channel monitor
printf "\n// B channel monitor\n" >> ${fname};
printf "assign b_payld_cmp_en = |(m_b_sel & (~b_mon_fifo_empty ? b_mstsel_out:\n" ${slvnum} >> ${fname};
printf "%37s|s_b_sel          ? b_mstsel_in:\n" "" >> ${fname};
printf "%37sw_dfslvsel_out    ? (%d'b1 << dfslv_awid_out[0+:%3d]):\n" "" ${slvnum} $(log2_ceil ${slvnum}) >> ${fname};
printf "%57s%d'b0));\n" "" ${slvnum} >> ${fname};

printf "assign b_payld_cmp  = " >> ${fname};
for (( i = 0; i < ${slvnum}; i++ )); do
    tmp=();
    for item in "${!b_chn_sideband[@]}"; do
        tmp+=(m${i}_${item});
    done
    tmp=$(IFS=,;echo "${tmp[*]}");
    printf "m_b_sel[%3d] ? {${tmp//,/, }}:\n%22s" ${i} >> ${fname};
done
printf "%15s{B_PAYLD_WIDTH{1'b0}};\n" "" >> ${fname};

printf "assign b_payld_in  = " >> ${fname};
for (( i = 0; i < ${mstnum}; i++ )); do
    tmp=();
    for item in "${!b_chn_sideband[@]}"; do
        if [ "${item}" == "bid" ] && [ ${slvnum} -gt 1 ]; then
            tmp+=(s${i}_${item}[$(log2_ceil ${slvnum})+:${b_chn_sideband[${item}]}]);
        else
            tmp+=(s${i}_${item});
        fi
    done
    tmp=$(IFS=,;echo "${tmp[*]}");
    printf "s_b_sel[%3d] ? {${tmp//,/, }}:\n%21s" ${i} >> ${fname};
done
tmp=();
for item in "${!b_chn_sideband[@]}"; do
    if [ "${item}" == "bid" ]; then
        if [ ${slvnum} -gt 1 ]; then
            tmp+=(dfslv_awid_out[$(log2_ceil ${slvnum})+:${b_chn_sideband[${item}]}]);
        else
            tmp+=(dfslv_awid_out);
        fi
    elif [ "${item}" == "bresp" ]; then
        tmp+=("2'b11");
    else
        tmp+=("${b_chn_sideband[${item}]}'b0");
    fi
done
tmp=$(IFS=,;echo "${tmp[*]}");
printf "%15s{${tmp//,/, }};\n" "" >> ${fname};
for (( i = 0; i < ${slvnum}; i++ )); do
    printf "assign b_mstsel_in[%3d] = " ${i} >> ${fname};
    for (( j = 0; j < ${mstnum}; j++ )); do
        printf "s_b_sel[%3d] ? (s${j}_bid[0+:%3d] == ${i}):\n%26s" \
               ${j} $(log2_ceil ${slvnum}) >> ${fname};
    done
    printf "%15s(dfslv_awid_out[0+:%3d] == ${i});\n" "" $(log2_ceil ${slvnum}) >> ${fname};
done
printf "assign b_cmp_fail  = ~b_mon_fifo_empty ? (b_payld_cmp !== b_payld_out):\n" >> ${fname};
printf "                                         (b_payld_cmp !== b_payld_in);\n" >> ${fname};
printf "\n" >> ${fname};
printf "assign b_mon_fifo_wr = (|s_b_sel & ~(b_mon_fifo_empty & |m_b_sel)) & ~w_dfslvsel_out;\n" >> ${fname};
printf "assign b_mon_fifo_rd = |m_b_sel & ~w_dfslvsel_out;\n" >> ${fname};
echo "" >> ${fname};
printf "axi_mon_fifo #(\n" >> ${fname};
printf "    .DATA_WIDTH(B_PAYLD_WIDTH),\n" >> ${fname};
printf "    .FIFO_DEPTH(128)\n" >> ${fname};
printf ") u_b_mon_payld_fifo (\n" >> ${fname};
printf "    .clk   ( aclk             ),\n" >> ${fname};
printf "    .rstn  ( aresetn          ),\n" >> ${fname};
printf "    .wr    ( b_mon_fifo_wr    ),\n" >> ${fname};
printf "    .wdata ( b_payld_in       ),\n" >> ${fname};
printf "    .rd    ( b_mon_fifo_rd    ),\n" >> ${fname};
printf "    .rdata ( b_payld_out      ),\n" >> ${fname};
printf "    .empty ( b_mon_fifo_empty ),\n" >> ${fname};
printf "    .full  ( b_mon_fifo_full  )\n" >> ${fname};
printf ");\n" >> ${fname};
printf "\n" >> ${fname};
printf "axi_mon_fifo #(\n" >> ${fname};
printf "    .DATA_WIDTH(${slvnum}),\n" >> ${fname};
printf "    .FIFO_DEPTH(128)\n" >> ${fname};
printf ") u_b_mon_mstsel_fifo (\n" >> ${fname};
printf "    .clk   ( aclk          ),\n" >> ${fname};
printf "    .rstn  ( aresetn       ),\n" >> ${fname};
printf "    .wr    ( b_mon_fifo_wr ),\n" >> ${fname};
printf "    .wdata ( b_mstsel_in   ),\n" >> ${fname};
printf "    .rd    ( b_mon_fifo_rd ),\n" >> ${fname};
printf "    .rdata ( b_mstsel_out  )\n" >> ${fname};
printf ");\n" >> ${fname};

# AR channel monitor
printf "\n// AR channel monitor\n" >> ${fname};
printf "assign ar_payld_cmp_en = |(s_ar_sel & (~ar_mon_fifo_empty ? ar_slvsel_out : ({%d{|m_ar_sel}} & ar_slvsel_in)));\n" \
       ${mstnum} >> ${fname};

printf "assign ar_payld_cmp = " >> ${fname};
for (( i = 0; i < ${mstnum}; i++ )); do
    tmp=();
    for item in "${!ar_chn_sideband[@]}"; do
        tmp+=(s${i}_${item});
    done
    tmp=$(IFS=,;echo "${tmp[*]}");
    printf "s_ar_sel[%3d] ? {${tmp//,/, }}:\n%22s" ${i} >> ${fname};
done
printf "%16s{AR_PAYLD_WIDTH{1'b0}};\n" "" >> ${fname};

printf "assign ar_payld_in = " >> ${fname};
for (( i = 0; i < ${slvnum}; i++ )); do
    tmp=();
    for item in "${!ar_chn_sideband[@]}"; do
        tmp+=(m${i}_${item});
        if [ "${item}" == "arid" ] && [ ${slvnum} -gt 1 ]; then
            tmp+=("$(log2_ceil ${slvnum})\'d${i}");
        fi
    done
    tmp=$(IFS=,;echo "${tmp[*]}");
    printf "m_ar_sel[%3d] ? {${tmp//,/, }}:\n%21s" ${i} >> ${fname};
done
printf "%16s{AR_PAYLD_WIDTH{1'b0}};\n" "" >> ${fname};
for (( i = 0; i < ${mstnum}; i++ )); do
    printf "assign ar_slvsel_in[%3d] = " ${i} >> ${fname};
    for (( j = 0; j < ${slvnum}; j++ )); do
        printf "m_ar_sel[%3d] ? (m${j}_araddr >= %d'h%s && m${j}_araddr < %d'h%s + %d'h%s):\n%27s" \
               ${j} ${ar_chn_sideband[araddr]} ${slvbase[${i}]} \
               ${ar_chn_sideband[araddr]} ${slvbase[${i}]} \
               ${ar_chn_sideband[araddr]} ${slvsize[${i}]} >> ${fname};
    done
    printf "%16s1'b0;\n" "" >> ${fname};
done
printf "assign dfslv_arid_in = " >> ${fname};
for (( i = 0; i < ${slvnum}; i++ )); do
    if [ ${slvnum} -gt 1 ]; then
        printf "m_ar_sel[%3d] ? {m${i}_arid, $(log2_ceil ${slvnum})\'d${i}}:\n%23s" ${i} >> ${fname};
    else
        printf "m_ar_sel[%3d] ? m${i}_arid:\n%23s" ${i} >> ${fname};
    fi
done
printf "%16s`expr ${ar_chn_sideband[arid]} + $(log2_ceil ${slvnum})`'b0;\n" "" >> ${fname};
printf "assign dfslv_arlen_in = " >> ${fname};
for (( i = 0; i < ${slvnum}; i++ )); do
    printf "m_ar_sel[%3d] ? m${i}_arlen:\n%24s" ${i} >> ${fname};
done
printf "%16s${ar_chn_sideband[arlen]}'b0;\n" "" >> ${fname};
printf "assign ar_cmp_fail  = ~ar_mon_fifo_empty ? (ar_payld_cmp !== ar_payld_out):\n" >> ${fname};
printf "                                           (ar_payld_cmp !== ar_payld_in);\n" >> ${fname};
printf "\n" >> ${fname};
printf "assign ar_mon_fifo_wr = |m_ar_sel & ~(ar_mon_fifo_empty & (|s_ar_sel | ~|ar_slvsel_in));\n" >> ${fname};
printf "assign ar_mon_fifo_rd = |s_ar_sel | ar_dfslvsel_out;\n" >> ${fname};
echo "" >> ${fname};
printf "axi_mon_fifo #(\n" >> ${fname};
printf "    .DATA_WIDTH(AR_PAYLD_WIDTH),\n" >> ${fname};
printf "    .FIFO_DEPTH(128)\n" >> ${fname};
printf ") u_ar_mon_payld_fifo (\n" >> ${fname};
printf "    .clk   ( aclk              ),\n" >> ${fname};
printf "    .rstn  ( aresetn           ),\n" >> ${fname};
printf "    .wr    ( ar_mon_fifo_wr    ),\n" >> ${fname};
printf "    .wdata ( ar_payld_in       ),\n" >> ${fname};
printf "    .rd    ( ar_mon_fifo_rd    ),\n" >> ${fname};
printf "    .rdata ( ar_payld_out      ),\n" >> ${fname};
printf "    .empty ( ar_mon_fifo_empty ),\n" >> ${fname};
printf "    .full  ( ar_mon_fifo_full  )\n" >> ${fname};
printf ");\n" >> ${fname};
printf "\n" >> ${fname};
printf "axi_mon_fifo #(\n" >> ${fname};
printf "    .DATA_WIDTH(${mstnum} + 1),\n" >> ${fname};
printf "    .FIFO_DEPTH(128)\n" >> ${fname};
printf ") u_ar_mon_slvsel_fifo (\n" >> ${fname};
printf "    .clk   ( aclk              ),\n" >> ${fname};
printf "    .rstn  ( aresetn           ),\n" >> ${fname};
printf "    .wr    ( ar_mon_fifo_wr    ),\n" >> ${fname};
printf "    .wdata ( {~|ar_slvsel_in, ar_slvsel_in} ),\n" >> ${fname};
printf "    .rd    ( ar_mon_fifo_rd    ),\n" >> ${fname};
printf "    .rdata ( {ar_dfslvsel_out, ar_slvsel_out} )\n" >> ${fname};
printf ");\n" >> ${fname};
printf "\n" >> ${fname};
printf "axi_mon_fifo #(\n" >> ${fname};
printf "    .DATA_WIDTH(${ar_chn_sideband[arid]} + $(log2_ceil ${slvnum})),\n" >> ${fname};
printf "    .FIFO_DEPTH(128)\n" >> ${fname};
printf ") u_ar_mon_dfslv_arid_fifo (\n" >> ${fname};
printf "    .clk   ( aclk              ),\n" >> ${fname};
printf "    .rstn  ( aresetn           ),\n" >> ${fname};
printf "    .wr    ( |m_ar_sel & ~|ar_slvsel_in ),\n" >> ${fname};
printf "    .wdata ( dfslv_arid_in     ),\n" >> ${fname};
printf "    .rd    ( |m_b_sel & w_dfslvsel_out ),\n" >> ${fname};
printf "    .rdata ( dfslv_arid_out    )\n" >> ${fname};
printf ");\n" >> ${fname};
printf "\n" >> ${fname};
printf "axi_mon_fifo #(\n" >> ${fname};
printf "    .DATA_WIDTH(${ar_chn_sideband[arlen]}),\n" >> ${fname};
printf "    .FIFO_DEPTH(128)\n" >> ${fname};
printf ") u_ar_mon_dfslv_arlen_fifo (\n" >> ${fname};
printf "    .clk   ( aclk              ),\n" >> ${fname};
printf "    .rstn  ( aresetn           ),\n" >> ${fname};
printf "    .wr    ( |m_ar_sel & ~|ar_slvsel_in ),\n" >> ${fname};
printf "    .wdata ( dfslv_arlen_in     ),\n" >> ${fname};
printf "    .rd    ( |m_b_sel & w_dfslvsel_out ),\n" >> ${fname};
printf "    .rdata ( dfslv_arlen_out    )\n" >> ${fname};
printf ");\n" >> ${fname};

# R channel monitor
printf "\n// R channel monitor\n" >> ${fname};
printf "assign r_payld_cmp_en = |(m_r_sel & (~r_mon_fifo_empty ? r_mstsel_out:\n" ${slvnum} >> ${fname};
printf "%37s|s_r_sel          ? r_mstsel_in:\n" "" >> ${fname};
printf "%37sr_dfslvsel_out    ? (%d'b1 << dfslv_arid_out[0+:%3d]):\n" "" ${slvnum} $(log2_ceil ${slvnum}) >> ${fname};
printf "%57s%d'b0));\n" "" ${slvnum} >> ${fname};

printf "assign r_payld_cmp  = " >> ${fname};
for (( i = 0; i < ${slvnum}; i++ )); do
    tmp=();
    for item in "${!r_chn_sideband[@]}"; do
        tmp+=(m${i}_${item});
    done
    tmp+=(m${i}_rlast);
    tmp=$(IFS=,;echo "${tmp[*]}");
    printf "m_r_sel[%3d] ? {${tmp//,/, }}:\n%22s" ${i} >> ${fname};
done
printf "%15s{R_PAYLD_WIDTH{1'b0}};\n" "" >> ${fname};

printf "assign r_payld_in  = " >> ${fname};
for (( i = 0; i < ${mstnum}; i++ )); do
    tmp=();
    for item in "${!r_chn_sideband[@]}"; do
        if [ "${item}" == "rid" ] && [ ${slvnum} -gt 1 ]; then
            tmp+=(s${i}_${item}[$(log2_ceil ${slvnum})+:${r_chn_sideband[${item}]}]);
        else
            tmp+=(s${i}_${item});
        fi
    done
    tmp+=(s${i}_rlast);
    tmp=$(IFS=,;echo "${tmp[*]}");
    printf "s_r_sel[%3d] ? {${tmp//,/, }}:\n%21s" ${i} >> ${fname};
done
tmp=();
for item in "${!r_chn_sideband[@]}"; do
    if [ "${item}" == "rid" ]; then
        if [ ${slvnum} -gt 1 ]; then
            tmp+=(dfslv_awid_out[$(log2_ceil ${slvnum})+:${r_chn_sideband[${item}]}]);
        else
            tmp+=(dfslv_awid_out);
        fi
    elif [ "${item}" == "rresp" ]; then
        tmp+=("2'b11");
    else
        tmp+=("${r_chn_sideband[${item}]}'b0");
    fi
done
tmp+=(dfslv_rlast);
tmp=$(IFS=,;echo "${tmp[*]}");
printf "%15s{${tmp//,/, }};\n" "" >> ${fname};
for (( i = 0; i < ${slvnum}; i++ )); do
    printf "assign r_mstsel_in[%3d] = " ${i} >> ${fname};
    for (( j = 0; j < ${mstnum}; j++ )); do
        printf "s_r_sel[%3d] ? (s${j}_bid[0+:%3d] == ${i}):\n%26s" \
               ${j} $(log2_ceil ${slvnum}) >> ${fname};
    done
    printf "%15s(dfslv_awid_out[0+:%3d] == ${i});\n" "" $(log2_ceil ${slvnum}) >> ${fname};
done
printf "assign r_cmp_fail  = ~r_mon_fifo_empty ? (r_payld_cmp !== r_payld_out):\n" >> ${fname};
printf "                                         (r_payld_cmp !== r_payld_in);\n" >> ${fname};
printf "\n" >> ${fname};
printf "assign r_mon_fifo_wr = (|s_r_sel & ~(r_mon_fifo_empty & |m_r_sel)) & ~r_dfslvsel_out;\n" >> ${fname};
printf "assign r_mon_fifo_rd = |m_r_sel & ~r_dfslvsel_out;\n" >> ${fname};
echo "" >> ${fname};
printf "axi_mon_fifo #(\n" >> ${fname};
printf "    .DATA_WIDTH(R_PAYLD_WIDTH),\n" >> ${fname};
printf "    .FIFO_DEPTH(128)\n" >> ${fname};
printf ") u_r_mon_payld_fifo (\n" >> ${fname};
printf "    .clk   ( aclk             ),\n" >> ${fname};
printf "    .rstn  ( aresetn          ),\n" >> ${fname};
printf "    .wr    ( r_mon_fifo_wr    ),\n" >> ${fname};
printf "    .wdata ( r_payld_in       ),\n" >> ${fname};
printf "    .rd    ( r_mon_fifo_rd    ),\n" >> ${fname};
printf "    .rdata ( r_payld_out      ),\n" >> ${fname};
printf "    .empty ( r_mon_fifo_empty ),\n" >> ${fname};
printf "    .full  ( r_mon_fifo_full  )\n" >> ${fname};
printf ");\n" >> ${fname};
printf "\n" >> ${fname};
printf "axi_mon_fifo #(\n" >> ${fname};
printf "    .DATA_WIDTH(${slvnum}),\n" >> ${fname};
printf "    .FIFO_DEPTH(128)\n" >> ${fname};
printf ") u_r_mon_mstsel_fifo (\n" >> ${fname};
printf "    .clk   ( aclk          ),\n" >> ${fname};
printf "    .rstn  ( aresetn       ),\n" >> ${fname};
printf "    .wr    ( r_mon_fifo_wr ),\n" >> ${fname};
printf "    .wdata ( r_mstsel_in   ),\n" >> ${fname};
printf "    .rd    ( r_mon_fifo_rd ),\n" >> ${fname};
printf "    .rdata ( r_mstsel_out  )\n" >> ${fname};
printf ");\n" >> ${fname};
printf "\n" >> ${fname};
printf "axi_mon_fifo #(\n" >> ${fname};
printf "    .DATA_WIDTH(${slvnum}),\n" >> ${fname};
printf "    .FIFO_DEPTH(128)\n" >> ${fname};
printf ") u_r_mon_mstsel_fifo (\n" >> ${fname};
printf "    .clk   ( aclk          ),\n" >> ${fname};
printf "    .rstn  ( aresetn       ),\n" >> ${fname};
printf "    .wr    ( r_mon_fifo_wr ),\n" >> ${fname};
printf "    .wdata ( r_mstsel_in   ),\n" >> ${fname};
printf "    .rd    ( r_mon_fifo_rd ),\n" >> ${fname};
printf "    .rdata ( r_mstsel_out  )\n" >> ${fname};
printf ");\n" >> ${fname};
echo "" >> ${fname};
echo "endmodule" >> ${fname};
echo "" >> ${fname};

printf "module axi_mon_fifo #(\n" >> ${fname};
printf "    parameter DATA_WIDTH = 3,\n" >> ${fname};
printf "    parameter FIFO_DEPTH = 128\n" >> ${fname};
printf ")(\n" >> ${fname};
printf "    input                         clk,\n" >> ${fname};
printf "    input                         rstn,\n" >> ${fname};
printf "    input                         wr,\n" >> ${fname};
printf "    input        [DATA_WIDTH-1:0] wdata,\n" >> ${fname};
printf "    input                         rd,\n" >> ${fname};
printf "    output logic [DATA_WIDTH-1:0] rdata,\n" >> ${fname};
printf "    output logic                  empty,\n" >> ${fname};
printf "    output logic                  full\n" >> ${fname};
printf ");\n" >> ${fname};
printf "\n" >> ${fname};
printf "logic [DATA_WIDTH-1:0] fifo [0:FIFO_DEPTH-1];\n" >> ${fname};
printf "logic [$clog2(FIFO_DEPTH):0] wptr;\n" >> ${fname};
printf "logic [$clog2(FIFO_DEPTH):0] rptr;\n" >> ${fname};
printf "\n" >> ${fname};
printf "assign empty = wptr == rptr;\n" >> ${fname};
printf "assign full  = (wptr[$clog2(FIFO_DEPTH)] ^ rptr[$clog2(FIFO_DEPTH)]) &&\n" >> ${fname};
printf "               (wptr[$clog2(FIFO_DEPTH)-1:0] == rptr[$clog2(FIFO_DEPTH)-1:0]);\n" >> ${fname};
printf "\n" >> ${fname};
printf "assign rdata = fifo[rptr[0+:$clog2(FIFO_DEPTH)]];\n" >> ${fname};
printf "\n" >> ${fname};
printf "always @(posedge clk or negedge rstn) begin\n" >> ${fname};
printf "    if (~rstn) begin\n" >> ${fname};
printf "        wptr <= {($clog2(FIFO_DEPTH)+1){1'b0}};\n" >> ${fname};
printf "        rptr <= {($clog2(FIFO_DEPTH)+1){1'b0}};\n" >> ${fname};
printf "    end\n" >> ${fname};
printf "    else begin\n" >> ${fname};
printf "        if (wr & ~full)  wptr <= wptr + 1;\n" >> ${fname};
printf "        if (rd & ~empty) rptr <= rptr + 1;\n" >> ${fname};
printf "    end\n" >> ${fname};
printf "end\n" >> ${fname};
printf "\n" >> ${fname};
printf "always @(posedge clk or negedge rstn) begin\n" >> ${fname};
printf "    integer i;\n" >> ${fname};
printf "    if (~rstn) begin\n" >> ${fname};
printf "        for (i = 0; i < FIFO_DEPTH; i = i + 1)\n" >> ${fname};
printf "            fifo[i] <= {DATA_WIDTH{1'b0}};\n" >> ${fname};
printf "    end\n" >> ${fname};
printf "    else begin\n" >> ${fname};
printf "        if (wr & ~full) fifo[wptr[0+:$clog2(FIFO_DEPTH)]] <= wdata;\n" >> ${fname};
printf "    end\n" >> ${fname};
printf "end\n" >> ${fname};
printf "\n" >> ${fname};
echo "endmodule" >> ${fname};
