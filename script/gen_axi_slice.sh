#!/bin/bash
source ./$(dirname ${0})/util.sh;

aw_pld_len=${1}
w_pld_len=${2}
b_pld_len=${3}
ar_pld_len=${4}
r_pld_len=${5}

fname="axi_slice.sv";
module="axi_slice";

rm -f ${fname};
touch ${fname};


echo   "/*-----------------------------------------------------*/" >> ${fname};
printf "// %s is generated by %s\n" ${fname} gen_axi_mux.sh        >> ${fname};
echo   "//"                                                        >> ${fname};
printf "// %50s\n" $(date +"%Y-%m-%d %H:%M:%S")                    >> ${fname};
echo   "/*-----------------------------------------------------*/" >> ${fname};
echo   ""                                                          >> ${fname};
printf "module %s (\n" "${module}" >> ${fname};
print_io i 1 aclk 1                >> ${fname};
print_io i 1 aresetn               >> ${fname};
# slave port
print_io i ${aw_pld_len} s_awpayload >> ${fname};
print_io i 1 s_awvalid               >> ${fname};
print_io o 1 s_awready               >> ${fname};
print_io i ${w_pld_len}  s_wpayload  >> ${fname};
print_io i 1 s_wvalid                >> ${fname};
print_io o 1 s_wready                >> ${fname};
print_io o ${b_pld_len}  s_bpayload  >> ${fname};
print_io o 1 s_bvalid                >> ${fname};
print_io i 1 s_bready                >> ${fname};
print_io i ${ar_pld_len} s_arpayload >> ${fname};
print_io i 1 s_arvalid               >> ${fname};
print_io o 1 s_arready               >> ${fname};
print_io o ${r_pld_len}  s_rpayload  >> ${fname};
print_io o 1 s_rvalid                >> ${fname};
print_io i 1 s_rready                >> ${fname};
# master port
print_io o ${aw_pld_len} m_awpayload >> ${fname};
print_io o 1 m_awvalid               >> ${fname};
print_io i 1 m_awready               >> ${fname};
print_io o ${w_pld_len}  m_wpayload  >> ${fname};
print_io o 1 m_wvalid                >> ${fname};
print_io i 1 m_wready                >> ${fname};
print_io i ${b_pld_len}  m_bpayload  >> ${fname};
print_io i 1 m_bvalid                >> ${fname};
print_io o 1 m_bready                >> ${fname};
print_io o ${ar_pld_len} m_arpayload >> ${fname};
print_io o 1 m_arvalid               >> ${fname};
print_io i 1 m_arready               >> ${fname};
print_io i ${r_pld_len}  m_rpayload  >> ${fname};
print_io i 1 m_rvalid                >> ${fname};
print_io o 1 m_rready                >> ${fname};
printf "\n);\n\n"                    >> ${fname};

print_logic_2d awpayload_latch ${aw_pld_len} 2 >> ${fname};
print_logic_2d wpayload_latch  ${w_pld_len}  2 >> ${fname};
print_logic_2d bpayload_latch  ${b_pld_len}  2 >> ${fname};
print_logic_2d arpayload_latch ${ar_pld_len} 2 >> ${fname};
print_logic_2d rpayload_latch  ${r_pld_len}  2 >> ${fname};

printf "\n"                          >> ${fname};
print_logic aw_wptr 2                >> ${fname};
print_logic w_wptr  2                >> ${fname};
print_logic b_wptr  2                >> ${fname};
print_logic ar_wptr 2                >> ${fname};
print_logic r_wptr  2                >> ${fname};
printf "\n"                          >> ${fname};
print_logic aw_rptr 2                >> ${fname};
print_logic w_rptr  2                >> ${fname};
print_logic b_rptr  2                >> ${fname};
print_logic ar_rptr 2                >> ${fname};
print_logic r_rptr  2                >> ${fname};

printf "\n"                          >> ${fname};
printf "always_ff @(posedge aclk or negedge aresetn) begin\n" >> ${fname};
printf "    if (~aresetn) begin\n" >> ${fname};
printf "        awpayload_latch <= {%3d'b0, %3d'b0};\n" \
       ${aw_pld_len} ${aw_pld_len} >> ${fname};
printf "        wpayload_latch  <= {%3d'b0, %3d'b0};\n" \
       ${w_pld_len}  ${w_pld_len}  >> ${fname};
printf "        bpayload_latch  <= {%3d'b0, %3d'b0};\n" \
       ${b_pld_len}  ${b_pld_len}  >> ${fname};
printf "        arpayload_latch <= {%3d'b0, %3d'b0};\n" \
       ${ar_pld_len} ${ar_pld_len} >> ${fname};
printf "        rpayload_latch  <= {%3d'b0, %3d'b0};\n" \
       ${r_pld_len}  ${r_pld_len}  >> ${fname};
printf "    end\n" >> ${fname};
printf "    else begin\n" >> ${fname};
printf "        if (s_awvalid && s_awready) awpayload_latch[aw_wptr[0]] <= s_awpayload;\n" >> ${fname};
printf "        if (s_wvalid  && s_wready)  wpayload_latch[w_wptr[0]]   <= s_wpayload;\n" >> ${fname};
printf "        if (m_bvalid  && m_bready)  bpayload_latch[b_wptr[0]]   <= m_bpayload;\n" >> ${fname};
printf "        if (s_arvalid && s_arready) arpayload_latch[ar_wptr[0]] <= s_arpayload;\n" >> ${fname};
printf "        if (m_rvalid  && m_rready)  rpayload_latch[r_wptr[0]]   <= m_rpayload;\n" >> ${fname};
printf "    end\n" >> ${fname};
printf "end\n" >> ${fname};

printf "\n"                          >> ${fname};
printf "always_ff @(posedge aclk or negedge aresetn) begin\n" >> ${fname};
printf "    if (~aresetn) begin\n" >> ${fname};
printf "        aw_wptr <= 2'b0;\n" >> ${fname};
printf "        w_wptr  <= 2'b0;\n" >> ${fname};
printf "        b_wptr  <= 2'b0;\n" >> ${fname};
printf "        ar_wptr <= 2'b0;\n" >> ${fname};
printf "        r_wptr  <= 2'b0;\n" >> ${fname};
printf "    end\n" >> ${fname};
printf "    else begin\n" >> ${fname};
printf "        if (s_awvalid && s_awready) aw_wptr <= aw_wptr + 2'b1;\n" >> ${fname};
printf "        if (s_wvalid  && s_wready)  w_wptr  <= w_wptr  + 2'b1;\n" >> ${fname};
printf "        if (m_bvalid  && m_bready)  b_wptr  <= b_wptr  + 2'b1;\n" >> ${fname};
printf "        if (s_arvalid && s_arready) ar_wptr <= ar_wptr + 2'b1;\n" >> ${fname};
printf "        if (m_rvalid  && m_rready)  r_wptr  <= r_wptr  + 2'b1;\n" >> ${fname};
printf "    end\n" >> ${fname};
printf "end\n" >> ${fname};
printf "\n" >> ${fname};
printf "assign s_awready = !((aw_wptr[1] != aw_rptr[1]) && (aw_wptr[0] == aw_rptr[0]));\n" >> ${fname};
printf "assign s_wready  = !((w_wptr[1]  != w_rptr[1] ) && (w_wptr[0]  == w_rptr[0] ));\n" >> ${fname};
printf "assign m_bready  = !((b_wptr[1]  != b_rptr[1] ) && (b_wptr[0]  == b_rptr[0] ));\n" >> ${fname};
printf "assign s_arready = !((ar_wptr[1] != ar_rptr[1]) && (ar_wptr[0] == ar_rptr[0]));\n" >> ${fname};
printf "assign m_rready  = !((r_wptr[1]  != r_rptr[1] ) && (r_wptr[0]  == r_rptr[0] ));\n" >> ${fname};
printf "\n" >> ${fname};
printf "always_ff @(posedge aclk or negedge aresetn) begin\n" >> ${fname};
printf "    if (~aresetn) begin\n" >> ${fname};
printf "        aw_rptr <= 2'b0;\n" >> ${fname};
printf "        w_rptr  <= 2'b0;\n" >> ${fname};
printf "        b_rptr  <= 2'b0;\n" >> ${fname};
printf "        ar_rptr <= 2'b0;\n" >> ${fname};
printf "        r_rptr  <= 2'b0;\n" >> ${fname};
printf "    end\n" >> ${fname};
printf "    else begin\n" >> ${fname};
printf "        if (m_awvalid && m_awready) aw_rptr <= aw_rptr + 2'b1;\n" >> ${fname};
printf "        if (m_wvalid  && m_wready)  w_rptr  <= w_rptr  + 2'b1;\n" >> ${fname};
printf "        if (s_bvalid  && s_bready)  b_rptr  <= b_rptr  + 2'b1;\n" >> ${fname};
printf "        if (m_arvalid && m_arready) ar_rptr <= ar_rptr + 2'b1;\n" >> ${fname};
printf "        if (s_rvalid  && s_rready)  r_rptr  <= r_rptr  + 2'b1;\n" >> ${fname};
printf "    end\n" >> ${fname};
printf "end\n" >> ${fname};
printf "\n" >> ${fname};
printf "assign m_awvalid = aw_wptr != aw_rptr;\n" >> ${fname};
printf "assign m_wvalid  = w_wptr  != w_rptr ;\n" >> ${fname};
printf "assign s_bvalid  = b_wptr  != b_rptr ;\n" >> ${fname};
printf "assign m_arvalid = ar_wptr != ar_rptr;\n" >> ${fname};
printf "assign s_rvalid  = r_wptr  != r_rptr ;\n" >> ${fname};
printf "\n" >> ${fname};
printf "assign m_awpayload = awpayload_latch[aw_rptr[0]];\n" >> ${fname};
printf "assign m_wpayload  = wpayload_latch [ w_rptr[0]];\n" >> ${fname};
printf "assign s_bpayload  = bpayload_latch [ b_rptr[0]];\n" >> ${fname};
printf "assign m_arpayload = arpayload_latch[ar_rptr[0]];\n" >> ${fname};
printf "assign s_rpayload  = rpayload_latch [ r_rptr[0]];\n" >> ${fname};

printf "\n"                          >> ${fname};
echo "endmodule"                     >> ${fname};
